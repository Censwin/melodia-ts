{"version":3,"sources":["application/Rank/index.tsx"],"names":["Rank","useState","showStatus","setShowStatus","history","useHistory","nodeRef","useRef","dispatch","useDispatch","rankList","useSelector","state","ScrollRef","useEffect","type","ActionType","useMemo","filterRankList","length","officialList","choicenessList","musicstyleList","globalList","specialList","current","refresh","enterDetail","useCallback","id","push","renderSongList","list","className","map","item","index","first","second","RenderOfficial","icon","onClick","placeholder","width","height","src","defaultImg","coverImgUrl","alt","updateFrequency","tracks","RenderRankList","name","in","appear","classNames","timeout","unmountOnExit","onExited","goBack","ref","style","background","title","handleClick","onScroll","forceCheck","React","memo"],"mappings":"2OAmBMA,EAAO,WACX,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAUC,cACVC,EAAUC,iBAAO,MACjBC,EAAWC,cACTC,EAAaC,aAAY,SAACC,GAAD,OAA8BA,EAAMZ,QAA7DU,SAEFG,EAAYN,iBAA4B,MAC9CO,qBAAU,WACRN,EAAS,CAAEO,KAAMC,QAChB,IAEH,MAAgFC,mBAAQ,WACtF,OAAOC,YAAeR,KACrB,CAACA,EAASS,SAFb,mBAAOC,EAAP,KAAqBC,EAArB,KAAqCC,EAArC,KAAqDC,EAArD,KAAiEC,EAAjE,KAGAV,qBAAU,WAAO,IAAD,EACd,UAAAD,EAAUY,eAAV,SAAmBC,aAErB,IAAMC,EAAcC,uBAAY,SAACC,GAC/BzB,EAAQ0B,KAAR,iBAAuBD,MACtB,IACGE,EAAiBH,uBACrB,SAACI,GAAD,OACE,oBAAIC,UAAU,oBAAd,SACGD,EAAKE,KAAI,SAACC,EAAWC,GACpB,OACE,+BACGA,EAAQ,EADX,KACgBD,EAAKE,MADrB,IAC4B,uBAAMJ,UAAU,cAAhB,qBAAkCE,EAAKG,YAD1DF,UAOjB,CAAC1B,EAASS,SAENoB,EAAiBX,uBACrB,kBACE,qBAAIK,UAAU,mBAAd,UACE,qBAAIA,UAAU,iBAAd,UACE,cAAC,IAAD,CAAMO,KAAK,UADb,wBAICpB,EAAac,KAAI,SAACC,GACjB,OACE,qBAAkBF,UAAU,gBAAgBQ,QAAS,kBAAMd,EAAYQ,EAAKN,KAA5E,UACE,qBAAKI,UAAU,cAAf,SACE,cAAC,IAAD,CAAUS,YAAa,qBAAKC,MAAM,OAAOC,OAAO,OAAOC,IAAKC,MAA5D,SACE,qBAAKD,IAAKV,EAAKY,YAAc,iBAAkBC,IAAI,SAGvD,sBAAMf,UAAU,kBAAhB,SAAmCE,EAAKc,kBACvClB,EAAeI,EAAKe,UAPdf,EAAKN,YAatB,CAACnB,EAASS,SAENgC,EAAiBvB,uBACrB,SAACI,GAAD,OACE,oBAAIC,UAAU,oBAAd,SACGD,EAAKE,KAAI,SAACC,GACT,OACE,qBAAkBF,UAAU,YAAYQ,QAAS,kBAAMd,EAAYQ,EAAKN,KAAxE,UACE,cAAC,IAAD,CAAUa,YAAa,qBAAKC,MAAM,OAAOC,OAAO,OAAOC,IAAKC,MAA5D,SACE,qBAAKD,IAAKV,EAAKY,YAAc,iBAAkBC,IAAI,OAErD,qBAAKf,UAAU,aACf,sBAAMA,UAAU,kBAAhB,SAAmCE,EAAKc,kBACxC,cAAC,IAAD,CAAMhB,UAAU,WAAWO,KAAK,SAChC,mBAAGP,UAAU,YAAb,SAA0BE,EAAKiB,SAPxBjB,EAAKN,WAatB,CAACnB,EAASS,SAEZ,OACE,cAAC,IAAD,CACEkC,GAAInD,EACJoD,QAAQ,EACRC,WAAW,kBACXC,QAAS,IACTC,eAAa,EACbC,SAAUtD,EAAQuD,OAClBrD,QAASA,EAPX,SASE,sBAAK2B,UAAU,iBAAiB2B,IAAKtD,EAArC,UACE,cAAC,IAAD,CACEuD,MAAO,CAAEC,WAAY,QACrBC,MAAM,qBACNC,YAAa,kBAAM7D,GAAc,MAEnC,yBAAS8B,UAAU,wBAAnB,SACE,cAAC,IAAD,CAAQ2B,IAAK/C,EAAWoD,SAAUC,aAAlC,SACE,gCACG3B,IACD,cAAC,IAAD,CAAMwB,MAAM,qBAAZ,SAAmBZ,EAAe9B,KAClC,cAAC,IAAD,CAAM0C,MAAM,qBAAZ,SAAmBZ,EAAe7B,KAClC,cAAC,IAAD,CAAMyC,MAAM,qBAAZ,SAAmBZ,EAAe5B,KAClC,cAAC,IAAD,CAAMwC,MAAM,qBAAZ,SAAmBZ,EAAe3B,kBASjC2C,cAAMC,KAAKpE","file":"static/js/5.06c34fc8.chunk.js","sourcesContent":["/*\r\n * @Date: 2021-11-24 15:32:17\r\n * @LastEditors: k200c\r\n * @LastEditTime: 2022-01-07 14:11:52\r\n * @Description: 排行榜\r\n * @FilePath: \\melodia-ts\\src\\application\\Rank\\index.tsx\r\n */\r\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { useHistory } from 'react-router';\r\nimport { Header, Scroll } from '../../baseUI';\r\nimport * as ActionType from './store/constans';\r\nimport { IApplicationState } from '../../store/reducers';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { filterRankList } from '../../utils/tools';\r\nimport { Card, Icon } from '../../components';\r\nimport LazyLoad, { forceCheck } from 'react-lazyload';\r\nimport defaultImg from './../../assets/img/defaultmusic.png';\r\n\r\nconst Rank = () => {\r\n  const [showStatus, setShowStatus] = useState(true);\r\n  const history = useHistory();\r\n  const nodeRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const { rankList } = useSelector((state: IApplicationState) => state.Rank);\r\n  type ScrollComponentType = React.ElementRef<typeof Scroll>;\r\n  const ScrollRef = useRef<ScrollComponentType>(null);\r\n  useEffect(() => {\r\n    dispatch({ type: ActionType.GET_RANKLIST });\r\n  }, []);\r\n\r\n  const [officialList, choicenessList, musicstyleList, globalList, specialList] = useMemo(() => {\r\n    return filterRankList(rankList);\r\n  }, [rankList.length]);\r\n  useEffect(() => {\r\n    ScrollRef.current?.refresh();\r\n  });\r\n  const enterDetail = useCallback((id) => {\r\n    history.push(`/album/${id}`);\r\n  }, []);\r\n  const renderSongList = useCallback(\r\n    (list) => (\r\n      <ul className=\"song-list-wrapper\">\r\n        {list.map((item: any, index: number) => {\r\n          return (\r\n            <li key={index}>\r\n              {index + 1}. {item.first} <span className=\"singer-name\"> — {item.second}</span>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    ),\r\n    [rankList.length]\r\n  );\r\n  const RenderOfficial = useCallback(\r\n    () => (\r\n      <ul className=\"official-wrapper\">\r\n        <h4 className=\"official-title\">\r\n          <Icon icon=\"music\" />\r\n          官方榜\r\n        </h4>\r\n        {officialList.map((item) => {\r\n          return (\r\n            <li key={item.id} className=\"official-item\" onClick={() => enterDetail(item.id)}>\r\n              <div className=\"img_wrapper\">\r\n                <LazyLoad placeholder={<img width=\"100%\" height=\"100%\" src={defaultImg} />}>\r\n                  <img src={item.coverImgUrl + '?param=300x300'} alt=\"\" />\r\n                </LazyLoad>\r\n              </div>\r\n              <span className=\"update_frequecy\">{item.updateFrequency}</span>\r\n              {renderSongList(item.tracks)}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    ),\r\n    [rankList.length]\r\n  );\r\n  const RenderRankList = useCallback(\r\n    (list) => (\r\n      <ul className=\"rank-list-wrapper\">\r\n        {list.map((item: any) => {\r\n          return (\r\n            <li key={item.id} className=\"rank-item\" onClick={() => enterDetail(item.id)}>\r\n              <LazyLoad placeholder={<img width=\"100%\" height=\"100%\" src={defaultImg} />}>\r\n                <img src={item.coverImgUrl + '?param=300x300'} alt=\"\" />\r\n              </LazyLoad>\r\n              <div className=\"decorate\" />\r\n              <span className=\"update_frequecy\">{item.updateFrequency}</span>\r\n              <Icon className=\"playicon\" icon=\"play\" />\r\n              <p className=\"rank-name\">{item.name}</p>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    ),\r\n    [rankList.length]\r\n  );\r\n  return (\r\n    <CSSTransition\r\n      in={showStatus}\r\n      appear={true}\r\n      classNames=\"common-fadeInUp\"\r\n      timeout={300}\r\n      unmountOnExit\r\n      onExited={history.goBack}\r\n      nodeRef={nodeRef}\r\n    >\r\n      <div className=\"rank-container\" ref={nodeRef}>\r\n        <Header\r\n          style={{ background: '#fff' }}\r\n          title=\"排行榜\"\r\n          handleClick={() => setShowStatus(false)}\r\n        />\r\n        <section className=\"scroll-window-wrapper\">\r\n          <Scroll ref={ScrollRef} onScroll={forceCheck}>\r\n            <div>\r\n              {RenderOfficial()}\r\n              <Card title=\"精选榜\">{RenderRankList(choicenessList)}</Card>\r\n              <Card title=\"曲风榜\">{RenderRankList(musicstyleList)}</Card>\r\n              <Card title=\"全球榜\">{RenderRankList(globalList)}</Card>\r\n              <Card title=\"特色榜\">{RenderRankList(specialList)}</Card>\r\n            </div>\r\n          </Scroll>\r\n        </section>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default React.memo(Rank);\r\n"],"sourceRoot":""}