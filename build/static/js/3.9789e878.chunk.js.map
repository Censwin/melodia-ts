{"version":3,"sources":["application/Album/index.tsx"],"names":["Album","history","useHistory","detailId","useParams","id","dispatch","useDispatch","currentAlbum","useSelector","state","useState","showStatus","setShowStatus","title","isRolling","descRolling","setDescRolling","nodeRef","useRef","useEffect","type","ActionType","payload","coverImgUrl","name","creator","description","subscribedCount","commentCount","shareCount","tracks","handleSelectSong","event","item","PlayerType","handlePlayAll","RenderTopInfo","useCallback","className","src","icon","getCount","avatarUrl","nickname","text","onClick","RenderControlBar","RenderSongList","songs","onClickCallback","showPlayAll","onClickPlayAll","in","appear","classNames","timeout","unmountOnExit","onExited","goBack","ref","style","color","handleClick","_","rolling","isEmptyObject","backgroundImage","React","memo"],"mappings":"yNAmBMA,EAAkB,WACtB,IAAMC,EAAUC,cACJC,EAAaC,cAAjBC,GACFC,EAAWC,cACTC,EAAiBC,aAAY,SAACC,GAAD,OAA8BA,EAAMV,SAAjEQ,aACR,EAAoCG,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,mBAAS,gBAAnC,mBAAOG,EAAP,KACA,GADA,KACkCH,oBAAS,IAA3C,mBAAOI,EAAP,KACA,GADA,KACsCJ,oBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAEMC,EAAUC,iBAAO,MACvBC,qBAAU,WACRd,EAAS,CAAEe,KAAMC,IAA4BC,QAAS,CAAElB,GAAIF,OAC3D,CAACA,IACJ,IACEqB,EAQEhB,EARFgB,YACAC,EAOEjB,EAPFiB,KACAC,EAMElB,EANFkB,QACAC,EAKEnB,EALFmB,YACAC,EAIEpB,EAJFoB,gBACAC,EAGErB,EAHFqB,aACAC,EAEEtB,EAFFsB,WACAC,EACEvB,EADFuB,OAGIC,EAAmB,SAACC,EAAyBC,GACjD5B,EAAS,CAAEe,KAAMc,IAA6BZ,QAASW,KAGnDE,EAAgB,WACpB9B,EAAS,CAAEe,KAAMc,IAA6BZ,QAASQ,KAGnDM,EAAgBC,uBACpB,kBACE,yBAASC,UAAU,mBAAnB,SACE,sBAAKA,UAAU,eAAf,UACE,0BAASA,UAAU,YAAnB,UACE,qBAAKA,UAAU,YAAYC,IAAKhB,EAAc,mBAC9C,sBAAKe,UAAU,aAAf,UACE,cAAC,IAAD,CAAME,KAAK,SACVC,YAASd,SAGd,0BAASW,UAAU,aAAnB,UACE,mBAAGA,UAAU,cAAb,SAA4Bd,IAC5B,0BAASc,UAAU,UAAnB,UACE,qBAAKA,UAAU,SAAf,SACE,qBAAKC,IAAKd,EAAQiB,UAAY,qBAEhC,qBAAKJ,UAAU,eAAf,SAA+Bb,EAAQkB,WACvC,qBAAKL,UAAU,cAAf,SACGvB,EACC,cAAC,IAAD,CAAS6B,KAAMlB,IAEf,sBAAMmB,QAAS,kBAAM7B,GAAe,IAApC,SAA4CU,mBAQ1D,CAACnB,EAAcQ,IAEX+B,EAAmBT,uBACvB,kBACE,yBAASC,UAAU,sBAAnB,SACE,sBAAKA,UAAU,cAAf,UACE,iCACE,cAAC,IAAD,CAAME,KAAK,gBACX,4BAAIb,OAHR,IAME,iCACE,cAAC,IAAD,CAAMa,KAAK,iBACX,4BAAIZ,OARR,IAWE,iCACE,cAAC,IAAD,CAAMY,KAAK,iBACX,4BAAIX,cAKZ,CAACtB,IAEGwC,EAAiBV,uBACrB,kBACE,cAAC,IAAD,CACEW,MAAOlB,EACPmB,gBAAiBlB,EACjBmB,aAAa,EACbC,eAAgBhB,MAGpB,CAAC5B,IAEH,OACE,cAAC,IAAD,CACE6C,GAAIzC,EACJ0C,QAAQ,EACRC,WAAW,kBACXC,QAAS,IACTC,eAAa,EACbC,SAAUzD,EAAQ0D,OAClBzC,QAASA,EAPX,SASE,sBAAKqB,UAAU,kBAAkBqB,IAAK1C,EAAtC,UACE,qBAAKqB,UAAU,gBACf,cAAC,IAAD,CACEsB,MAAO,CAAEC,MAAO,QAChBhD,MAAOA,EACPiD,YAAa,SAACC,GAAD,OAAYnD,GAAc,IACvCoD,QAASlD,KAETmD,YAAc1D,IACd,qCACE,qBAAK+B,UAAU,aAAasB,MAAO,CAAEM,gBAAgB,OAAD,OAAS3C,EAAT,QACpD,qBAAKe,UAAU,wBAAf,SACE,cAAC,IAAD,UACE,gCACGF,IACAU,IACAC,oBAWJoB,cAAMC,KAAKrE","file":"static/js/3.9789e878.chunk.js","sourcesContent":["/*\r\n * @Date: 2021-11-19 16:54:40\r\n * @LastEditors: k200c\r\n * @LastEditTime: 2022-01-07 14:25:13\r\n * @Description: 歌单 与 专辑 详情页\r\n * @FilePath: \\melodia-ts\\src\\application\\Album\\index.tsx\r\n */\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { CommonSongList, Header, Marquee, Scroll } from '../../baseUI';\r\nimport { Icon } from '../../components';\r\nimport { getCount, getName, isEmptyObject } from '../../utils/tools';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { IApplicationState } from '../../store/reducers';\r\nimport * as ActionType from './store/constants';\r\nimport * as PlayerType from './../Player/store/constans';\r\nimport MusicNote from '../../baseUI/musicNote';\r\n\r\nconst Album: React.FC = () => {\r\n  const history = useHistory();\r\n  const { id: detailId } = useParams<{ id?: string }>();\r\n  const dispatch = useDispatch();\r\n  const { currentAlbum } = useSelector((state: IApplicationState) => state.Album);\r\n  const [showStatus, setShowStatus] = useState(true);\r\n  const [title, setTitle] = useState('歌单');\r\n  const [isRolling, setIsRolling] = useState(false);\r\n  const [descRolling, setDescRolling] = useState(false);\r\n  const handleExit = () => {};\r\n  const nodeRef = useRef(null);\r\n  useEffect(() => {\r\n    dispatch({ type: ActionType.GET_ALBUMDETAIL, payload: { id: detailId } });\r\n  }, [detailId]);\r\n  const {\r\n    coverImgUrl,\r\n    name,\r\n    creator,\r\n    description,\r\n    subscribedCount,\r\n    commentCount,\r\n    shareCount,\r\n    tracks\r\n  } = currentAlbum;\r\n\r\n  const handleSelectSong = (event: React.MouseEvent, item: any) => {\r\n    dispatch({ type: PlayerType.ADD_CURRENT_SONG, payload: item });\r\n  };\r\n\r\n  const handlePlayAll = () => {\r\n    dispatch({ type: PlayerType.ADD_CURRENT_SONG, payload: tracks });\r\n  };\r\n\r\n  const RenderTopInfo = useCallback(\r\n    () => (\r\n      <section className=\"top-desc-wrapper\">\r\n        <div className=\"info-wrapper\">\r\n          <article className=\"info-left\">\r\n            <img className=\"cover-pic\" src={coverImgUrl + '?param=300x300'} />\r\n            <div className=\"play-count\">\r\n              <Icon icon=\"play\" />\r\n              {getCount(subscribedCount)}\r\n            </div>\r\n          </article>\r\n          <article className=\"info-right\">\r\n            <p className=\"album-title\">{name}</p>\r\n            <article className=\"creator\">\r\n              <div className=\"avatar\">\r\n                <img src={creator.avatarUrl + '?param=100x100'} />\r\n              </div>\r\n              <div className=\"creator-name\">{creator.nickname}</div>\r\n              <div className=\"description\">\r\n                {descRolling ? (\r\n                  <Marquee text={description} />\r\n                ) : (\r\n                  <span onClick={() => setDescRolling(true)}>{description}</span>\r\n                )}\r\n              </div>\r\n            </article>\r\n          </article>\r\n        </div>\r\n      </section>\r\n    ),\r\n    [currentAlbum, descRolling]\r\n  );\r\n  const RenderControlBar = useCallback(\r\n    () => (\r\n      <section className=\"control-bar-wrapper\">\r\n        <div className=\"control-bar\">\r\n          <span>\r\n            <Icon icon=\"plus-square\" />\r\n            <i>{subscribedCount}</i>\r\n          </span>\r\n          |\r\n          <span>\r\n            <Icon icon=\"comment-dots\" />\r\n            <i>{commentCount}</i>\r\n          </span>\r\n          |\r\n          <span>\r\n            <Icon icon=\"share-square\" />\r\n            <i>{shareCount}</i>\r\n          </span>\r\n        </div>\r\n      </section>\r\n    ),\r\n    [currentAlbum]\r\n  );\r\n  const RenderSongList = useCallback(\r\n    () => (\r\n      <CommonSongList\r\n        songs={tracks}\r\n        onClickCallback={handleSelectSong}\r\n        showPlayAll={true}\r\n        onClickPlayAll={handlePlayAll}\r\n      />\r\n    ),\r\n    [currentAlbum]\r\n  );\r\n  return (\r\n    <CSSTransition\r\n      in={showStatus}\r\n      appear={true}\r\n      classNames=\"common-fadeInUp\"\r\n      timeout={300}\r\n      unmountOnExit\r\n      onExited={history.goBack}\r\n      nodeRef={nodeRef}\r\n    >\r\n      <div className=\"album-container\" ref={nodeRef}>\r\n        <div className=\"bg-decorate\" />\r\n        <Header\r\n          style={{ color: '#fff' }}\r\n          title={title}\r\n          handleClick={(_: any) => setShowStatus(false)}\r\n          rolling={isRolling}\r\n        />\r\n        {!isEmptyObject(currentAlbum) && (\r\n          <>\r\n            <div className=\"background\" style={{ backgroundImage: `url(${coverImgUrl})` }} />\r\n            <div className=\"scroll-window-wrapper\">\r\n              <Scroll>\r\n                <div>\r\n                  {RenderTopInfo()}\r\n                  {RenderControlBar()}\r\n                  {RenderSongList()}\r\n                </div>\r\n              </Scroll>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default React.memo(Album);\r\n"],"sourceRoot":""}