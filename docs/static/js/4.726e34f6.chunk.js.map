{"version":3,"sources":["application/Discover/index.tsx"],"names":["CHANNEL_LIST","icon","name","path","Discover","props","bannerList","recommendList","videoUrl","dispatch","route","useDispatch","history","useHistory","useEffect","length","type","ActionTypes","GET_BANNER","GET_RECOMMEND","GET_VIDEO_URL","VerticalScrollRef","useRef","current","refresh","MoreBtn","useCallback","className","onClick","push","enterDetail","id","RenderRecommend","map","item","_","src","picUrl","getCount","playCount","RenderChannelList","to","Message","info","ref","imgList","headerClassName","title","extra","autoPlay","muted","connect","React","memo"],"mappings":"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","file":"static/js/4.726e34f6.chunk.js","sourcesContent":["/*\r\n * @Author: Censwin\r\n * @Date: 2021-11-14 12:09:49\r\n * @LastEditTime: 2022-01-07 14:40:53\r\n * @Description:\r\n * @FilePath: \\melodia-ts\\src\\application\\Discover\\index.tsx\r\n */\r\nimport React, { useCallback, useEffect, useRef } from 'react';\r\nimport { RouteConfig } from 'react-router-config';\r\nimport { useDispatch, connect } from 'react-redux';\r\nimport { Icon, Slider, Card, Spin, Message } from '../../components';\r\nimport { IApplicationState } from '../../store/reducers';\r\nimport { IDiscoverState, ActionTypes } from './store';\r\nimport { IconName } from '@fortawesome/fontawesome-svg-core';\r\nimport { getCount } from '../../utils/tools';\r\nimport { useHistory } from 'react-router';\r\nimport { HorizenScroll, Scroll } from '../../baseUI';\r\nimport { Link } from 'react-router-dom';\r\nconst CHANNEL_LIST = [\r\n  {\r\n    icon: 'calendar-week',\r\n    name: '每日推荐',\r\n    path: '/recommend'\r\n  },\r\n  {\r\n    icon: 'stream',\r\n    name: '歌单',\r\n    path: '/recommend'\r\n  },\r\n  {\r\n    icon: 'sort-amount-up',\r\n    name: '排行榜',\r\n    path: '/rank'\r\n  },\r\n  {\r\n    icon: 'street-view',\r\n    name: '歌手',\r\n    path: '/search'\r\n  }\r\n];\r\ntype TDiscoverProps = IDiscoverState & RouteConfig;\r\n\r\nconst Discover: React.FC<TDiscoverProps> = (props) => {\r\n  const { bannerList, recommendList, videoUrl, route } = props;\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (!bannerList.length) {\r\n      dispatch({ type: ActionTypes.GET_BANNER });\r\n    }\r\n    if (!recommendList.length) {\r\n      dispatch({ type: ActionTypes.GET_RECOMMEND });\r\n    }\r\n    dispatch({ type: ActionTypes.GET_VIDEO_URL });\r\n  }, []);\r\n\r\n  type ScrollComponentType = React.ElementRef<typeof Scroll>;\r\n  const VerticalScrollRef = useRef<ScrollComponentType>(null);\r\n  useEffect(() => {\r\n    VerticalScrollRef.current?.refresh();\r\n  });\r\n\r\n  const MoreBtn = useCallback((props) => {\r\n    const { path } = props;\r\n    return (\r\n      <div className=\"more-btn-wrapper\" onClick={() => history.push(path)}>\r\n        <span>更多</span>\r\n        <Icon icon=\"angle-right\" />\r\n      </div>\r\n    );\r\n  }, []);\r\n\r\n  const enterDetail = useCallback((id) => {\r\n    history.push(`/album/${id}`);\r\n  }, []);\r\n\r\n  const RenderRecommend = useCallback(() => {\r\n    return recommendList.map((item) => {\r\n      return (\r\n        <div\r\n          key={item.id}\r\n          className=\"recommend-item horizen-item\"\r\n          onClick={(_) => enterDetail(item.id)}\r\n        >\r\n          <img className=\"recommend-item-pic\" src={item.picUrl + '?param=300x300'} />\r\n          <div className=\"play-count\">\r\n            <Icon icon=\"play\" />\r\n            {getCount(item.playCount)}\r\n          </div>\r\n          <span className=\"recommend-item-name\">{item.name}</span>\r\n        </div>\r\n      );\r\n    });\r\n  }, [recommendList]);\r\n  const RenderChannelList = useCallback(() => {\r\n    return CHANNEL_LIST.map((item) => {\r\n      return (\r\n        <div className=\"channel-entity\" key={item.name}>\r\n          <Link to={item.path} className=\"c-blocka\">\r\n            <div className=\"channel-icon-wrapper\">\r\n              <div className=\"channel-icon-bg\">\r\n                <Icon icon={item.icon as IconName} />\r\n              </div>\r\n            </div>\r\n            <p className=\"channel-name\">{item.name}</p>\r\n          </Link>\r\n        </div>\r\n      );\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"discover-content\">\r\n      <div className=\"Header\">\r\n        <div\r\n          className=\"searchBar\"\r\n          onClick={() => {\r\n            history.push('/search');\r\n          }}\r\n        >\r\n          <span>\r\n            <Icon icon=\"search\" />\r\n            <span>周杰伦</span>\r\n          </span>\r\n        </div>\r\n        <span onClick={() => Message.info('这里啥也没有')}>\r\n          <Icon icon=\"bars\" className=\"header-more\" />\r\n        </span>\r\n      </div>\r\n      <div className=\"scroll-window-wrapper\">\r\n        <Scroll ref={VerticalScrollRef}>\r\n          <div>\r\n            <Slider imgList={bannerList} />\r\n            <div className=\"channel-list\">{RenderChannelList()}</div>\r\n            <Card\r\n              headerClassName=\"discover-card-header\"\r\n              title=\"推荐歌单\"\r\n              extra={<MoreBtn path=\"/recommend\" />}\r\n            >\r\n              <HorizenScroll>\r\n                <div className=\"recommend-wrapper\">{RenderRecommend()}</div>\r\n              </HorizenScroll>\r\n            </Card>\r\n            <Card\r\n              headerClassName=\"discover-card-header\"\r\n              title=\"精选音乐视频\"\r\n              extra={<MoreBtn path=\"/recommend\" />}\r\n            >\r\n              <div className=\"video-list-wrapper\">\r\n                <video autoPlay src={videoUrl} muted={true}>\r\n                  您的浏览器不支持 video 标签。\r\n                </video>\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        </Scroll>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ Discover }: IApplicationState) => ({\r\n  bannerList: Discover.bannerList,\r\n  recommendList: Discover.recommendList,\r\n  videoUrl: Discover.videoUrl\r\n});\r\n\r\nexport default connect(mapStateToProps)(React.memo(Discover));\r\n"],"sourceRoot":""}