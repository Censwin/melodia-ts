{"version":3,"sources":["application/Singer/index.tsx"],"names":["Singer","useState","showStatus","setShowStatus","history","useHistory","params","useParams","dispatch","useDispatch","useSelector","state","artist","songsOfArtist","containerRef","useRef","imgWrapperRef","songsWrapperRef","scrollRef","initHeight","layerRef","headerRef","infoRef","transform","prefixStyle","useEffect","type","ActionType","payload","id","current","h","offsetHeight","style","top","refresh","handleScroll","useCallback","pos","height","newY","y","percent","Math","abs","minScrollTop","paddingTop","zIndex","clientHeight","nodeRef","in","timeout","classNames","unmountOnExit","appear","onExited","goBack","className","title","handleClick","ref","backgroundImage","picUrl","name","onScroll","songs","onClickCallback","event","item","PlayerType","showPlayAll","onClickPlayAll"],"mappings":"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","file":"static/js/8.8be13518.chunk.js","sourcesContent":["/*\r\n * @Date: 2021-12-27 10:00:34\r\n * @LastEditors: k200c\r\n * @LastEditTime: 2022-01-07 14:27:05\r\n * @Description:\r\n * @FilePath: \\melodia-ts\\src\\application\\Singer\\index.tsx\r\n */\r\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { CommonSongList, Header, Scroll } from '../../baseUI';\r\nimport { IApplicationState } from '../../store/reducers';\r\nimport { isEmptyObject, prefixStyle } from '../../utils/tools';\r\nimport * as ActionType from './store/constants';\r\nimport * as PlayerType from './../Player/store/constans';\r\n\r\nconst Singer: React.FC = () => {\r\n  const [showStatus, setShowStatus] = useState(true);\r\n  const history = useHistory();\r\n\r\n  const params = useParams<{ id?: string }>();\r\n\r\n  const dispatch = useDispatch();\r\n  const { artist, songsOfArtist } = useSelector((state: IApplicationState) => state.Singer);\r\n  const containerRef = useRef(null);\r\n  const imgWrapperRef = useRef<HTMLElement>(null);\r\n  const songsWrapperRef = useRef<HTMLElement>(null);\r\n  type ScrollType = React.ElementRef<typeof Scroll>;\r\n  const scrollRef = useRef<ScrollType>(null);\r\n  const initHeight = useRef(0);\r\n  const layerRef = useRef<HTMLElement>(null);\r\n  const headerRef = useRef<React.ElementRef<typeof Header>>(null);\r\n  const infoRef = useRef<HTMLDivElement>(null);\r\n  // 往上偏移的尺寸，露出圆角\r\n  const OFFSET = 5;\r\n  const transform = prefixStyle('transform');\r\n  useEffect(() => {\r\n    dispatch({ type: ActionType.GET_SINGER, payload: { id: params.id } });\r\n  }, [params.id]);\r\n  useEffect(() => {\r\n    if (imgWrapperRef.current && songsWrapperRef.current && layerRef.current && scrollRef.current) {\r\n      let h = imgWrapperRef.current.offsetHeight;\r\n      songsWrapperRef.current.style.top = `${h - OFFSET}px`;\r\n      initHeight.current = h;\r\n      layerRef.current.style.top = `${h - OFFSET}px`;\r\n      scrollRef.current.refresh();\r\n    }\r\n  }, [songsOfArtist]);\r\n\r\n  const handleScroll = useCallback((pos: { y: number }) => {\r\n    if (\r\n      imgWrapperRef.current &&\r\n      songsWrapperRef.current &&\r\n      layerRef.current &&\r\n      scrollRef.current &&\r\n      headerRef.current &&\r\n      infoRef.current\r\n    ) {\r\n      let height = initHeight.current;\r\n      const newY = pos.y;\r\n      const percent = Math.abs(newY / height);\r\n      const minScrollTop = -(height - OFFSET) + headerRef.current.offsetHeight;\r\n      if (newY > 0) {\r\n        // 向下拉\r\n        imgWrapperRef.current.style[transform as any] = `scale(${1 + percent})`;\r\n        layerRef.current.style.top = `${height - OFFSET + newY}px`;\r\n      } else if (newY >= minScrollTop) {\r\n        layerRef.current.style.top = `${height - OFFSET + newY}px`;\r\n        imgWrapperRef.current.style.paddingTop = '75%';\r\n        imgWrapperRef.current.style.height = `0`;\r\n        imgWrapperRef.current.style.zIndex = '1';\r\n        if (newY >= minScrollTop + infoRef.current.clientHeight) {\r\n          infoRef.current.style[transform as any] = `translate3d(0, ${newY}px, 0)`;\r\n          infoRef.current.style['opacity'] = `${1 - percent}`;\r\n        }\r\n      } else if (newY < minScrollTop) {\r\n        // 超过Header\r\n        imgWrapperRef.current.style.height = `${headerRef.current.offsetHeight}px`;\r\n        imgWrapperRef.current.style.paddingTop = '0';\r\n        imgWrapperRef.current.style.zIndex = '100';\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const handleClickSong = (event: React.MouseEvent, item: any) => {\r\n    dispatch({ type: PlayerType.ADD_CURRENT_SONG, payload: item });\r\n  };\r\n  const handlePlayAll = () => {\r\n    dispatch({ type: PlayerType.ADD_CURRENT_SONG, payload: songsOfArtist });\r\n  };\r\n  return (\r\n    <CSSTransition\r\n      nodeRef={containerRef} // TRG issue 668\r\n      in={showStatus}\r\n      timeout={300}\r\n      classNames=\"common-fadeInUp\"\r\n      unmountOnExit\r\n      appear={true}\r\n      onExited={history.goBack}\r\n    >\r\n      <section className=\"singer-container\">\r\n        <Header\r\n          title=\"\"\r\n          className=\"singer-header\"\r\n          handleClick={() => setShowStatus(false)}\r\n          ref={headerRef}\r\n        />\r\n        <article\r\n          className=\"img-wrapper\"\r\n          style={{ backgroundImage: `url(${artist.picUrl}?param=300x300)` }}\r\n          ref={imgWrapperRef}\r\n        >\r\n          <div className=\"filter\" />\r\n          <div className=\"singer-info\" ref={infoRef}>\r\n            <div className=\"info-left\">\r\n              <h1>{artist.name}</h1>\r\n              <p>175.5 万 粉丝</p>\r\n            </div>\r\n            <div>\r\n              <span className=\"mark-btn\">关注</span>\r\n            </div>\r\n          </div>\r\n        </article>\r\n        <article className=\"Bglayer\" ref={layerRef} />\r\n        <article className=\"SingerSongwrapper\" ref={songsWrapperRef}>\r\n          <Scroll ref={scrollRef} onScroll={handleScroll}>\r\n            <CommonSongList\r\n              songs={songsOfArtist}\r\n              onClickCallback={handleClickSong}\r\n              showPlayAll={true}\r\n              onClickPlayAll={handlePlayAll}\r\n            />\r\n          </Scroll>\r\n        </article>\r\n      </section>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default Singer;\r\n"],"sourceRoot":""}