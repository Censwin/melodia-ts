{"version":3,"sources":["application/Recommend/index.tsx"],"names":["Recommend","props","useState","show","setshow","selectedId","setSelectedId","history","useHistory","dispatch","useDispatch","useSelector","state","cateList","playLists","Global_Loading","Home","containerRef","useRef","ScrollRef","useEffect","length","type","ActionTypes","GET_CATELIST","id","current","refresh","handleBack","useCallback","enterDetail","push","nodeRef","in","timeout","classNames","unmountOnExit","appear","onExited","goBack","className","ref","title","handleClick","onTabClick","index","findIndex","item","String","GET_PLAYLISTS","payload","cat","name","limit","map","Item","label","onScroll","forceCheck","data","onClickCallback","React","memo"],"mappings":"mNAmBMA,EAAsB,SAACC,GAC3B,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAAUC,cACVC,EAAWC,cACjB,EAAgCC,aAAY,SAACC,GAAD,OAA8BA,EAAMZ,aAAxEa,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UACVC,EAAmBJ,aAAY,SAACC,GAAD,OAA8BA,EAAMI,QAAnED,eACFE,EAAeC,iBAAO,MAEtBC,EAAYD,iBAA4B,MAE9CE,qBAAU,WACHP,EAASQ,QACZZ,EAAS,CAAEa,KAAMC,IAAYC,iBAE9B,IACHJ,qBAAU,WAAO,IAAD,EACU,IAApBP,EAASQ,QAA+B,KAAfhB,GAC3BC,EAAcO,EAAS,GAAGY,IAE5B,UAAAN,EAAUO,eAAV,SAAmBC,YAClB,CAACd,EAAUC,IAEd,IAAMc,EAAaC,uBAAY,WAC7BzB,GAAQ,KACP,IAEG0B,EAAcD,uBAAY,SAACJ,GAC/BlB,EAAQwB,KAAR,iBAAuBN,MACtB,IAWH,OACE,cAAC,IAAD,CACEO,QAASf,EACTgB,GAAI9B,EACJ+B,QAAS,IACTC,WAAW,kBACXC,eAAa,EACbC,QAAQ,EACRC,SAAU/B,EAAQgC,OAPpB,SASE,sBAAKC,UAAU,sBAAsBC,IAAKxB,EAA1C,UACGF,GAAkB,cAAC,IAAD,IACnB,cAAC,IAAD,CAAQ2B,MAAM,2BAAOC,YAAaf,IAClC,cAAC,IAAD,CAAMgB,WAtBmB,SAACnB,GAC9BnB,EAAcmB,GACd,IAAMoB,EAAQhC,EAASiC,WAAU,SAACC,GAAD,OAAUC,OAAOD,EAAKtB,MAAQA,KAC/DhB,EAAS,CACPa,KAAMC,IAAY0B,cAClBC,QAAS,CAAEC,IAAKtC,EAASgC,GAAOO,KAAMC,MAAO,OAiB3C,SACGxC,EAASyC,KAAI,SAACP,GACb,OACE,cAAC,IAAKQ,KAAN,CAAWC,MAAOT,EAAKK,KAAvB,SACE,qBAAKZ,UAAU,wBAAf,SACE,cAAC,IAAD,CAAQC,IAAKtB,EAAWsC,SAAUC,aAAlC,SACE,qBAAKlB,UAAU,mBAAf,SACE,cAAC,IAAD,CAAgBmB,KAAM7C,EAAW8C,gBAAiB9B,WAJxBiB,EAAKtB,eAiBtCoC,cAAMC,KAAK9D","file":"static/js/6.a6ca81c9.chunk.js","sourcesContent":["/*\r\n * @Date: 2021-11-17 14:57:53\r\n * @LastEditors: k200c\r\n * @LastEditTime: 2022-01-07 14:03:14\r\n * @Description:\r\n * @FilePath: \\melodia-ts\\src\\application\\Recommend\\index.tsx\r\n */\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { RouteConfig } from 'react-router-config';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { useHistory } from 'react-router';\r\nimport { Header, Scroll } from '../../baseUI';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ActionTypes } from './store';\r\nimport { IApplicationState } from '../../store/reducers';\r\nimport { forceCheck } from 'react-lazyload';\r\nimport { Spin, Tabs } from '../../components';\r\nimport { CommonPlaylist } from './../../baseUI';\r\n\r\nconst Recommend: React.FC = (props) => {\r\n  const [show, setshow] = useState(true);\r\n  const [selectedId, setSelectedId] = useState('');\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const { cateList, playLists } = useSelector((state: IApplicationState) => state.Recommend);\r\n  const { Global_Loading } = useSelector((state: IApplicationState) => state.Home);\r\n  const containerRef = useRef(null);\r\n  type ScrollComponentType = React.ElementRef<typeof Scroll>;\r\n  const ScrollRef = useRef<ScrollComponentType>(null);\r\n\r\n  useEffect(() => {\r\n    if (!cateList.length) {\r\n      dispatch({ type: ActionTypes.GET_CATELIST });\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (cateList.length !== 0 && selectedId === '') {\r\n      setSelectedId(cateList[0].id);\r\n    }\r\n    ScrollRef.current?.refresh();\r\n  }, [cateList, playLists]);\r\n\r\n  const handleBack = useCallback(() => {\r\n    setshow(false);\r\n  }, []);\r\n\r\n  const enterDetail = useCallback((id) => {\r\n    history.push(`/album/${id}`);\r\n  }, []);\r\n\r\n  const handleChangeSelectedId = (id: string) => {\r\n    setSelectedId(id);\r\n    const index = cateList.findIndex((item) => String(item.id) === id);\r\n    dispatch({\r\n      type: ActionTypes.GET_PLAYLISTS,\r\n      payload: { cat: cateList[index].name, limit: 50 }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CSSTransition\r\n      nodeRef={containerRef} // TRG issue 668\r\n      in={show}\r\n      timeout={300}\r\n      classNames=\"common-fadeInUp\"\r\n      unmountOnExit\r\n      appear={true}\r\n      onExited={history.goBack}\r\n    >\r\n      <div className=\"recommend-container\" ref={containerRef}>\r\n        {Global_Loading && <Spin />}\r\n        <Header title=\"歌单广场\" handleClick={handleBack} />\r\n        <Tabs onTabClick={handleChangeSelectedId}>\r\n          {cateList.map((item) => {\r\n            return (\r\n              <Tabs.Item label={item.name} key={item.id}>\r\n                <div className=\"scroll-window-wrapper\">\r\n                  <Scroll ref={ScrollRef} onScroll={forceCheck}>\r\n                    <div className=\"playlist-wrapper\">\r\n                      <CommonPlaylist data={playLists} onClickCallback={enterDetail} />\r\n                    </div>\r\n                  </Scroll>\r\n                </div>\r\n              </Tabs.Item>\r\n            );\r\n          })}\r\n        </Tabs>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default React.memo(Recommend);\r\n"],"sourceRoot":""}